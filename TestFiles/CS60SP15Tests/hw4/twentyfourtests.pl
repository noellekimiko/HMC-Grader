:- set_test_options([load(never)]).
:- include('twentyfour.pl').
:- set_test_options([load(always)]).

/* test all solutions, by backtracking */

:- begin_tests(twentyfour).
test(t1) :- setof( Tree, solve( ['+','-'], [6,10,16,24], 24, Tree ), A ),
% This fails linecheck
    sort( A, SA ), RightAnswer = [[+, 6, [+, 10, [-, 24, 16]]], [+, 6, [+, 24, [-, 10, 16]]], [+, 6, [+, [-, 10, 16], 24]], [+, 6, [+, [-, 24, 16], 10]], [+, 6, [-, 10, [-, 16, 24]]], [+, 6, [-, 24, [-, 16, 10]]], [+, 6, [-, [+, 10, 24], 16]], [+, 6, [-, [+, 24, 10], 16]], [+, 10, [+, 6, [-, 24, 16]]], [+, 10, [+, 24, [-, 6, 16]]], [+, 10, [+, [-, 6, 16], 24]], [+, 10, [+, [-, 24, 16], 6]], [+, 10, [-, 6, [-, 16, 24]]], [+, 10, [-, 24, [-, 16, 6]]], [+, 10, [-, [+, 6, 24], 16]], [+, 10, [-, [+, 24, 6], 16]], [+, 16, [-, 24, [+, 6, 10]]], [+, 16, [-, 24, [+, 10, 6]]], [+, 16, [-, [-, 24, 6], 10]], [+, 16, [-, [-, 24, 10], 6]], [+, 24, [+, 6, [-, 10, 16]]], [+, 24, [+, 10, [-, 6, 16]]], [+, 24, [+, [-, 6, 16], 10]], [+, 24, [+, [-, 10, 16], 6]], [+, 24, [-, 6, [-, 16, 10]]], [+, 24, [-, 10, [-, 16, 6]]], [+, 24, [-, 16, [+, 6, 10]]], [+, 24, [-, 16, [+, 10, 6]]], [+, 24, [-, [+, 6, 10], 16]], [+, 24, [-, [+, 10, 6], 16]], [+, 24, [-, [-, 16, 6], 10]], [+, 24, [-, [-, 16, 10], 6]], [+, [+, 6, 10], [-, 24, 16]], [+, [+, 6, 24], [-, 10, 16]], [+, [+, 6, [-, 10, 16]], 24], [+, [+, 6, [-, 24, 16]], 10], [+, [+, 10, 6], [-, 24, 16]], [+, [+, 10, 24], [-, 6, 16]], [+, [+, 10, [-, 6, 16]], 24], [+, [+, 10, [-, 24, 16]], 6], [+, [+, 24, 6], [-, 10, 16]], [+, [+, 24, 10], [-, 6, 16]], [+, [+, 24, [-, 6, 16]], 10], [+, [+, 24, [-, 10, 16]], 6], [+, [+, [-, 6, 16], 10], 24], [+, [+, [-, 6, 16], 24], 10], [+, [+, [-, 10, 16], 6], 24], [+, [+, [-, 10, 16], 24], 6], [+, [+, [-, 24, 16], 6], 10], [+, [+, [-, 24, 16], 10], 6], [+, [-, 6, 16], [+, 10, 24]], [+, [-, 6, 16], [+, 24, 10]], [+, [-, 6, [-, 16, 10]], 24], [+, [-, 6, [-, 16, 24]], 10], [+, [-, 10, 16], [+, 6, 24]], [+, [-, 10, 16], [+, 24, 6]], [+, [-, 10, [-, 16, 6]], 24], [+, [-, 10, [-, 16, 24]], 6], [+, [-, 16, 6], [-, 24, 10]], [+, [-, 16, 10], [-, 24, 6]], [+, [-, 16, [+, 6, 10]], 24], [+, [-, 16, [+, 10, 6]], 24], [+, [-, 24, 6], [-, 16, 10]], [+, [-, 24, 10], [-, 16, 6]], [+, [-, 24, 16], [+, 6, 10]], [+, [-, 24, 16], [+, 10, 6]], [+, [-, 24, [+, 6, 10]], 16], [+, [-, 24, [+, 10, 6]], 16], [+, [-, 24, [-, 16, 6]], 10], [+, [-, 24, [-, 16, 10]], 6], [+, [-, [+, 6, 10], 16], 24], [+, [-, [+, 6, 24], 16], 10], [+, [-, [+, 10, 6], 16], 24], [+, [-, [+, 10, 24], 16], 6], [+, [-, [+, 24, 6], 16], 10], [+, [-, [+, 24, 10], 16], 6], [+, [-, [-, 16, 6], 10], 24], [+, [-, [-, 16, 10], 6], 24], [+, [-, [-, 24, 6], 10], 16], [+, [-, [-, 24, 10], 6], 16], [-, 6, [-, 16, [+, 10, 24]]], [-, 6, [-, 16, [+, 24, 10]]], [-, 6, [-, [-, 16, 10], 24]], [-, 6, [-, [-, 16, 24], 10]], [-, 10, [-, 16, [+, 6, 24]]], [-, 10, [-, 16, [+, 24, 6]]], [-, 10, [-, [-, 16, 6], 24]], [-, 10, [-, [-, 16, 24], 6]], [-, 16, [+, 6, [-, 10, 24]]], [-, 16, [+, 10, [-, 6, 24]]], [-, 16, [+, [-, 6, 24], 10]], [-, 16, [+, [-, 10, 24], 6]], [-, 16, [-, 6, [-, 24, 10]]], [-, 16, [-, 10, [-, 24, 6]]], [-, 16, [-, [+, 6, 10], 24]], [-, 16, [-, [+, 10, 6], 24]], [-, 24, [+, 6, [-, 10, 16]]], [-, 24, [+, 10, [-, 6, 16]]], [-, 24, [+, [-, 6, 16], 10]], [-, 24, [+, [-, 10, 16], 6]], [-, 24, [-, 6, [-, 16, 10]]], [-, 24, [-, 10, [-, 16, 6]]], [-, 24, [-, 16, [+, 6, 10]]], [-, 24, [-, 16, [+, 10, 6]]], [-, 24, [-, [+, 6, 10], 16]], [-, 24, [-, [+, 10, 6], 16]], [-, 24, [-, [-, 16, 6], 10]], [-, 24, [-, [-, 16, 10], 6]], [-, [+, 6, 10], [-, 16, 24]], [-, [+, 6, 24], [-, 16, 10]], [-, [+, 6, [+, 10, 24]], 16], [-, [+, 6, [+, 24, 10]], 16], [-, [+, 10, 6], [-, 16, 24]], [-, [+, 10, 24], [-, 16, 6]], [-, [+, 10, [+, 6, 24]], 16], [-, [+, 10, [+, 24, 6]], 16], [-, [+, 16, 24], [+, 6, 10]], [-, [+, 16, 24], [+, 10, 6]], [-, [+, 16, [-, 24, 6]], 10], [-, [+, 16, [-, 24, 10]], 6], [-, [+, 24, 6], [-, 16, 10]], [-, [+, 24, 10], [-, 16, 6]], [-, [+, 24, 16], [+, 6, 10]], [-, [+, 24, 16], [+, 10, 6]], [-, [+, 24, [+, 6, 10]], 16], [-, [+, 24, [+, 10, 6]], 16], [-, [+, 24, [-, 16, 6]], 10], [-, [+, 24, [-, 16, 10]], 6], [-, [+, [+, 6, 10], 24], 16], [-, [+, [+, 6, 24], 10], 16], [-, [+, [+, 10, 6], 24], 16], [-, [+, [+, 10, 24], 6], 16], [-, [+, [+, 24, 6], 10], 16], [-, [+, [+, 24, 10], 6], 16], [-, [+, [-, 16, 6], 24], 10], [-, [+, [-, 16, 10], 24], 6], [-, [+, [-, 24, 6], 16], 10], [-, [+, [-, 24, 10], 16], 6], [-, [-, 16, 6], [-, 10, 24]], [-, [-, 16, 10], [-, 6, 24]], [-, [-, 16, [-, 6, 24]], 10], [-, [-, 16, [-, 10, 24]], 6], [-, [-, 24, 6], [-, 10, 16]], [-, [-, 24, 10], [-, 6, 16]], [-, [-, 24, [-, 6, 16]], 10], [-, [-, 24, [-, 10, 16]], 6], [-, [-, [+, 16, 24], 6], 10], [-, [-, [+, 16, 24], 10], 6], [-, [-, [+, 24, 16], 6], 10], [-, [-, [+, 24, 16], 10], 6]],
% check if it's right
    SA == RightAnswer.



test(t2) :- setof( Tree, solve( ['+','-','*'], [3,16,4,100], 24, Tree ), A ),
     sort( A, SA ), RightAnswer = [[-, 100, [*, 4, [+, 3, 16]]], [-, 100, [*, 4, [+, 16, 3]]], [-, 100, [*, [+, 3, 16], 4]], [-, 100, [*, [+, 16, 3], 4]]],
    SA == RightAnswer.

test(t3) :- solve( ['+','-','*','/'], [4,10,11,12], 24, ['+', ['+', ['/', 11, 4], 10], 12]).

test(t4) :- setof( Tree, solve( ['+','-','*','/'], [2,8,22,424], 42, Tree ), A ),
     sort( A, SA ), RightAnswer = [[-, [/, 424, 8], [/, 22, 2]]], 
     SA == RightAnswer.

test(t5) :- \+solve( ['+','-','*','/'], [1,1,1,1], 24, _).
:- end_tests(twentyfour).

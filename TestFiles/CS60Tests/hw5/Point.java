// A data structure that represents a 2d point.

// WARNING: This class is simpler than several of the
//   Point (or PointR) classes we've used so far. There's
//   no way to change a point object once it's created
//   (there are getters but no setters or move methods).
//
//   Whenever you need a Point in a new location, you
//   just create a new Point object, rather than
//   modifying an existing object.  You can do this either 
//   by calling a constructor ("new Point(...)") or 
//   by calling the .offset(...) method on an existing point.

class Point {
	private double x;
	private double y;

	/** @return the x coordinate */
	public double getX() {
		return this.x;
	}

	/** @return the y coordinate */
	public double getY() {
		return this.y;
	}
	
	/**
	 * @param startX  the initial x-coordinate
	 * @param startY  the initial y-coordinate
	 */
	public Point(double startX, double startY) {
		this.x = startX;
		this.y = startY;
	}


	/** If not otherwise specified, a point starts at (0,0). */
	public Point() {
		this(0.0, 0.0); // calls the constructor above
	}

	/** @return a NEW point in the given direction from this point. */
	public Point offset(double deltaX, double deltaY) {
		return new Point(this.getX() + deltaX, this.getY() + deltaY); 
	}
	
	/** @returns the point as a string */
	@Override
	public String toString() {
		return "(" + x + "," + y + ")";
	}

	///// The code below is auto-generated by Eclipse;
	/////    don't worry about how it works.

	/** Auto-generated equals method */ 
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Point other = (Point) obj;
		if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
			return false;
		if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
			return false;
		return true;
	}

    /** Auto-generated hashCode method */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

}